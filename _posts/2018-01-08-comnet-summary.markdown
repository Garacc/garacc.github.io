---
layout:     post
title:      "CommNet Summary"
subtitle:   "ZJU, ISEE, CommNet, Final Review"
date:       2018-01-08
author:     "Garacc"
header-img: "img/post-bg-unix-linux.jpg"
tags:
    - CommNet
    - Course
---


# Chapter 1 绪论
---

- 通信网络概况
	- 通信发展史： 语言→文字→印刷→电报→电话→现代通信
	- 通信网络简介
	- 网络发展趋势： 业务数据化，技术分组化，光纤化，无线化
	- 未来网络特点： 网络和业务易购融合
- 通信网络发展中的主要因素 


# Chapter 2 网络服务
---

- 范例：邮政系统
- 应用
- 网络服务
- 网络元素
- 网络机制

## 2.1 应用

**网络功能**：信息传输，信息交换的途径是**应用**  

**信息的特性**：多样性，有向性，具有一定的形式  

**数字化趋势**：信息流逐渐变为比特流——衡量方式：通信量/业务量(即通信速率)

## 2.2 网络服务

**面向连接服务**：

- 特点：有序，同路径  
- 三个阶段：建立连接，数据传送，拆除连接  
- 服务质量：误码率，优先级，时延，时延抖动，分组丢失率  

**无连接服务**：

- 特点：可能无序，单独传送  
- 服务质量：优先级，平均时延，最大时延，错误处理  

## 2.3 网络元素

**链路/Link**：单向数据传输通路  

**中继器/Repeater**：物理层使用，路径中的信号放大器  

**集线器/HUB**：物理层，放大信号，直连近距离的若干设备成为一个小的子网  
可以理解为用网线粗暴的插在一起，除此之外什么功能都实现不了  

**网桥/Bridge**：数据链路层，将两个子网连接在一起，按MAC地址转发帧  
基本工作模式为接收-存储-地址过滤-转发  
相比HUB可以根据MAC地址进行过滤了，可以分隔不同网络的广播信息，防盗门具有隔音功能了  

**路由器/Router**：网络层，基于网络协议在不同网络之间传递数据包，为数据流提供端到端的路由  
相比Bridge体量更大(不局限于1+1，可以把好多个子网加在一起)，包容性更强(支持多种底层协议802.3/11/blabla)，用逻辑地址(一般是IP地址)自由度更高
  
**交换机/Switch**：好多种，有二层的有三层的，和Router有一点区别，详细区分请移步[这里](https://www.zhihu.com/question/20465477)  

**混合物桥路器/Brouter**：听起来很厉害但接触不到的东西  

**网关/GateWay**：网络层防盗门，很多钥匙(高层协议)都能开，隔音性能很好的那种

## 2.4 网络机制

*这里就是名词很多，我就随便列一列，表明一下一个组网里需要考虑这些问题*

- 复用/Multiplexing & 多址接入/Multi-access
- 交换/Switching & 路由/Routing [*你看这里都一起写，网络元素里非要仔细区分，感觉除了纠结概念实际上没什么必要划的那么清*]
- 差错控制/Error control
- 流量控制/Flow control 
- 拥塞控制/Congest control
- 资源分配/Resource allocation [带宽，功率，存储器，处理器]
- 服务质量(用户体验质量)/QoS(QoE)
- 安全性/Security

## 思考题

1. 应用、业务、基本网络元素与基本网络机制在通信网络中的“位置”，他们是如何相互联系在一起的？

	- 应用位于网络最高层，直接对用户提供服务
	- 业务位于网络中层，分为面向连接和无连接两类，为应用提供服务
	- 基本网络元素位于网络底层，是承载业务、执行物理传输的设备
	- 基本网络机制贯穿网络各层，负责网络资源分配、控制、安全保证等各项技术

2. 路由器一节中，请分析用户1.1向用户2.1发送数据时，路由器的工作原理。

	- 第一步：用户1.1发送数据，路由器隶属于子网1的端口1.8接收到数据
	- 第二步：路由器确认数据包的目标IP地址2.1，确定目标用户隶属于子网2，并从子网2的端口2.5发送数据
	- 第三步：用户2.1接收到路由器发出的数据，IP地址匹配后接收数据

3. 什么是二层交换机与三层交换机？他们各自的核心技术是什么？交换机与路由器的异同？[\*好吧前面吐槽这么久思考题找回来了\*]

	- 二层交换机：连接多个子网，按MAC地址转发帧的数据链路层设备。
	- 二层核心技术：根据源和目的节点的MAC地址，可用硬件快速实现存储、过滤和转发帧功能。
	- 三层交换机：具备路由功能，并能以二层交换机技术转发数据的网络层设备。
	- 三层核心技术：一次路由，多次转发。即可以调用路由功能建立完整的IP和MAC的映射(一次路由)，再使用二层交换技术完成转发(多次转发)。
	- 二层交换机与路由器的异同：两者都是连接子网、实现数据转发的设备。二层交换机工作于数据链路层，仅凭MAC地址无法隔离广播域；路由器工作于网络层，能靠IP地址隔离广播域。
	- 三层交换机与路由器的异同：两者都能连接采用不同路由协议的子网，选择路由路径并转发数据。三层交换机兼具路由器的功能和二层交换技术，可以以低成本更灵活地连接拓扑、分配子网带宽和配置信息资源。


# Chapter 3 网络分层结构
---

- 网络分层结构
- OSI分层结构
- TCP/IP分层结构
- ODN结构
- 基于跨层设计的网络体系结构

## 3.1 网络分层结构

**模块/Module**：通过执行某个功能支持系统的功能操作  
模块通常设计为黑盒子。模块化的思路可以简化设计，提高网络可理解性，同时设计是标准化，可互换，广泛有效的。  

**层次**：不多说，上图  

![](https://garacc.github.io/img/comnet_summary/layer.png)

**分层的原因及好处**：

- 按功能分层，每层独立完成一部分功能  
- 每层只与相邻两层交互，下层提供的功能向高层提供服务
- 每层独立，每层采用合适的技术实现，分层独立开发和测试
- 只要接口关系不变，一层发生更改时其它层不受影响

## 3.2 [OSI参考模型](https://baike.baidu.com/item/OSI%E6%A8%A1%E5%9E%8B/10119902?fr=aladdin)

标准的七层模型(从底到顶)：物理层，数据链路层，网络层，传输层，会话层，表示层，应用层

## 3.3 [TCP/IP网络体系结构](https://baike.baidu.com/item/TCP%2FIP%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/5081378?fr=aladdin)

基于TCP/IP协议组的四层模型(从底到顶)：网络接入层，网际互联层，传输层，应用层

**两个模型(OSI vs TCP/IP)的比较**：  

**相同点**：

- 基于独立的协议栈的概念，层的功能大体相似
  
**不同点**：
  
- 是否区分服务、接口、协议(OSI区分，TCP/IP不区分)
- 通用性(OSI通用，TCP/IP不通用)
- 通信模式(OSI的通信模式清楚，TCP/IP的通信模式在网络接口层下面模糊)

## 3.4 ODN模型

继续直接上图(*不常用的模型就是容易打入冷宫*)(好吧其实**中间件**的概念还是很重要的)

![](https://garacc.github.io/img/comnet_summary/odn.png)

## 3.5 基于跨层设计的网络体系结构

**为什么要设计跨层体系结构？**  
1. 必要性(分层网络中与遇到的瓶颈)：	
	- 安全性
	- 服务质量
	- 移动性
2. 面临的问题：
	- 所有节点 or 部分节点
	- 所有层 or 不分层
	- 协议改进 or 新协议设计
	- 是否需要有协调节点(non-manager or manager, Centralized or Distributed)
3. 挑战与劣势：
	- 跨层设计的共存
		- 接口标准化
		- 采用透明的方式
	- 跨层信号
		- 包头设计
		- ICMP包
		- 额外的跨层信号
	- 通用性
	- 对原有分层网络结构的破坏

## 思考题

1. 从网络性能优化(overall network performance)和业务性能优化(service performance optimization)角度思考跨层设计的优势与挑战？

	- 网络性能优化角度：网络各层的参数存在关联、相互影响，跨层设计可以使网络结构更灵活、简单，网络适应性更强，还使网络控制模块能更全面、准确的了解网络状态，做出使整体的性能达到全局最优的控制决策，避免出现只有某几层局部最优或各层分别控制产生冲突的情况。但跨层设计会使控制机制更复杂、控制开销更大、优化目标(效用函数)难以确定。
	- 业务性能优化角度：网络各层服务最终需要使用户满意。而用户只关心用户体验质量(QoE)，而不在意网络如何提供服务。影响QoE的参数不局限于网络的某一层，因此采用跨层设计，不仅能根据业务特征简化或灵活调整网络结构，还能根据业务约束(约束条件)和网络状态调整网络性能以使用户获得满意的QoE。但跨层设计不仅使控制复杂开销变大，还需要全面了解业务的特征和用户需求的约束。

2. 从通用网络效用最大化问题的垂直分解角度，分析严格分层与跨层设计的优缺点。

	- 严格分层：严格分层将整个网络模块化，每一个模块分别执行不同的功能，彼此独立，模块之间以接口的形式互联。当我们对每一层进行优化时，可以不用考虑其他层对当前功能或目标带来的影响，简化了网络效用最大化问题的复杂性，同时每层的目标明确清晰。但严格分层在优化的角度属于对每一层求取局部最优值，不能保证目前分层方式得出的多个局部最优值组成的是全局最优。
	- 跨层设计：跨层设计在整体上将问题考虑的更加全面，比如当我们目标为高效率传输，或安全传输时，拥有更大的调整空间和协作模式。跨层设计在进行优化时实际上也是要模块化的，因为模块化可以把一个大问题分割成若干个子问题，简化问题难度，但如何选择效用函数，如何对整个网络进行分割，当我们考虑不同目标时往往是不同的，这导致跨层设计相比目前已有的分层模型在处理上要更难，不确定性更大。


# Chapter 4 点对点协议
---

- 概述
- DLC的点到点协议
	- 错误检测
	- 自动重发请求
	- HARQ
	- 数据帧
	- DLC标准

- 网络层点对点协议
- 传输层点对点协议

## 4.1 概述

我们需要先明确什么是点对点，什么是端对端？  
> 点对点(Peer to Peer)：通过直接交换来共享计算机资源和服务，本质上说，是由物理层、数据链路层和网络层组成的通信子网为网络环境中的主机提供的服务。
> 
> 端对端：建立在点到点通信的基础之上，由一段段的点到点通信信道构成的，是比点到点通信更高一级的通信方式，完成应用程序(进程)之间的通信。本质上说，是由传输层为网络中的主机提供的服务。
> 
> 相关链接：[知乎](https://www.zhihu.com/question/49245486)

点对点协议中，每当我们将目光集中在某一层时，比这一层低的整个网络将被模拟成一个简单的模型，如：

- 考虑数据链路控制层(DLC层)，底层可以描述为虚拟比特管道；
- 考虑更高层(比DLC更高)，底层可以描述为数据包。
  
DLC层的主要目标是以数据包到达的**次序，不重复、无错误**地传送数据包。  
DLC层主要通过**前向纠错(FEC)**和**自动重发请求(ARQ)**来实现。

## 4.2 错误检测

主要介绍目前比较成熟的几种错误检测方法。

### 4.2.1 单奇偶校验

对所有的信号比特求异或，异或结果以1bit的形式负载所有信号比特后面。  
单奇偶校验很简单，但只能检测奇数个错误的情况，同时效率低，而且无法确认错误位置。

### 4.2.2 水平和垂直奇偶校验

将信号比特排列成矩阵的形式，每行每列分别做异或校验，再在最后对行和列的校验结果做异或校验。  
方块校验(水平和垂直校验的别称)相比单奇偶校验适应性变得更强，但仍无法处理很短的错误脉冲。

### 4.2.3 奇偶校验编码

基于奇偶校验，但是对信号比特的所有可能组合进行校验编码，需要用于校验的长度往往要大于原信息长度，但可以完全检测出错误。

### 4.2.4 [循环冗余校验(CRC)](https://baike.baidu.com/item/CRC/1453359)

基于特定搞定多项式，对于数据比特的生成多项式进行求余操作，将余数作为冗余校验码缀在数据后面。  
CRC是目前使用最广泛的校验方式。

![](https://garacc.github.io/img/comnet_summary/crc.png)

## 4.3 [自动重发请求(ARQ)](https://baike.baidu.com/item/ARQ/7402812)

ARQ的目的在于纠错，不同类型的重发协议区别主要体现在重发效率上。常见的重发协议有：
 
- 走/停式ARQ(确定一个包正确传输再传下一个)
- 返回n帧ARQ(哪个包出错了就倒回去从哪个包重新开始发)
- 选择性重发ARQ(哪个包错了就把哪个包再发一遍)

## 4.4 HARQ

基于之前对错误检测和ARQ的介绍，现在我们引出混合ARQ，即HARQ。  
HARQ将前向纠错和自动重传结合，同时具有纠错与出错重传机制，并通过重传适应信道的动态变化。
HARQ性能改善都是以增加系统复杂性为代价的。

## 4.5 数据帧

![](https://garacc.github.io/img/comnet_summary/dataframe.png)

## 4.6 DLC

HDLC的工作模式：

- 正常应答(NRM, Normal Response Mode)：主-从链路，采用轮询方式
- 异步应答(ARM, Asynchronous Response Mode)：主-从链路，异步信号
- 异步平衡(ABM, Asynchronous Balanced Mode)：全双工点对点链路(每次通信需要建立链路，有一个简单的握手)

标准的DLC结构：  

![](https://garacc.github.io/img/comnet_summary/dlc_dataframe.png)

## 4.7 网络层点对点协议

设计网络层点对点协议需要考虑的因素：

- 会话识别与寻址
	- 数据包头中会含有原地址(SA)和目的地址(DA)
	- 虚拟电路(Virtual Circuit)
- 数据包编号
	- 序列号
- 错误恢复
	- 错误恢复的必要性
	- 实现机理
- 流量控制

网络层的两种常用协议： X.25网络层协议[基于虚拟电路]，互联网协议(IP)[基于数据包头以及SA/DA]

## 4.8 传输层点对点协议

传输层协议主要介绍两个: [TCP协议](https://baike.baidu.com/item/TCP/33012)和[UDP协议](https://baike.baidu.com/item/UDP)。  
*这里学过计算机网络的同学肯定早就会了，我就简单列一下各自的特点。*

**TCP**：基于握手的、可靠的、端到端的、面向连接的字节流传输层协议

- **面向连接**，不提供广播和多播服务
- **可靠**服务，使用确认机制来检查数据是否安全、完整的到达
- 面向字节流
- 全双工

**UDP**：简便的、不可靠的、无连接传输服务，使用IP数据报携带报文

- 没有确认机制
- 不对报文排序
- 没有超时机制
- 没有反馈机制控制流量

注：用UDP不是说传输的数据就不可靠，而是基于UDP的传输需要上层的应用程序承担可靠性方面的工作

## 思考题

1. 证明水平和垂直奇偶校验中最终得到的奇偶校验码(如果是所有数的模2加)等于水平奇偶校验码的模2加，也等于垂直奇偶校验码的模2加。

	- 数学问题，将原信号写成矩阵形式做基本数字计算即可

2. 假设数据0101标志一个帧的结束，而且比特位的填充规则是在原数据串中每个010之后插入一个“0”。因此，经过填充之后，数据串010101将被转换成01001001。而且，如果帧是以01结尾的，在真实的结束数据串0101中第一个“0”之后需要填充一个“0”。根据以上的规则，说明数据串11011010010101011101是如何被填充的。接收端需要的去除位填充的规则又是什么？如何去除数据串11010001001001100101中的填充位？

	- 填充前： 11011010&nbsp;&nbsp;010&nbsp;&nbsp;1010&nbsp;&nbsp;11101
	- 填充后： 1101101000100101001110100101
	- 去除规则：删除0100的最后一个0
	- 去除前：11010001001001100101
	- 去除后：11010&nbsp;&nbsp;010&nbsp;&nbsp;10&nbsp;&nbsp;1100101 = 11010010101100101


# Chapter 5 媒体接入控制协议
---

- 概论
- 信道化技术
- 随机接入
- 受控型MAC协议
- 分裂算法
- 多跳网路的MAC协议*
- 认知无线电网络的MAC协议
- DTN的MAC协议

## 5.1 概论

本章是整个通信网络中最重要的两个部分之一。与通信网络相关的大部分内容都是通过媒体接入控制协议(MAC协议)的方式来实现的。在网络中，比MAC层低的是物理层，一般对其进行的研究与讨论需要与物理器件、材料相结合；比MAC层高的从网络层开始往上，大部分情况是以计算机网络的形式出现的，人们更愿意从计算机科学技术，而非通信技术的形式来研究。

为了更清楚的介绍这一部分内容，相比于前面的几个章节这里我也会多着些笔墨，尽最大的力量将这一段介绍清楚。
  
讲到媒体接入控制，实际上就是对形成通信链路的控制。通信链路一般分为两种：点对点链路和多点到一点链路。  
**点对点链路**：通信介质一般为双绞线、同轴电缆、光纤或微波链路。考虑点对点链路时，每条链路上接收到的信号仅取决于该链路上发送的信号以及噪声，也就是假设不同的点对点链路不会互相干扰。  
**多对一链路**：指一点接收到的信号取决于两个或者多个其他节点发出的信号，用于多路访问媒质和共享媒体中，通常包括卫星信道，无线电广播信道，多接口总线。  

我们在考虑媒体接入问题的时候，需要对其进行数学角度的抽象，点对点链路和多对一链路在数学角度的映射为排队论和分布式队列(无中心控制的多个并列的队列)。在实际生活中，虽然有线连接使用了点对点通信媒质，但实际上若干个点会由某个中继进行组合，从而变成多用户场景(参考第二章的网络元素：交换机和路由器)，单纯的点对点链路几乎是不存在的。因此我们考虑的问题的核心是分布式队列问题。考虑这一场景有两个难点：

1. 服务器不知道哪个用户有数据；
2. 用户无法知道其他用户的数据排队情况。  

为了解决这个问题，我们需要考虑媒介共享技术(Medium sharing techniques)来解决多个用户的共同使用。媒介共享技术细分为静态信道化技术以及动态媒体接入控制。

![](https://garacc.github.io/img/comnet_summary/mac_cata.png)

随机接入和信道化技术之间是什么关系呢？其实我们可以简单的将整个通信的通道理解为一条道路，传输的包就是一辆辆在路上行驶的车，因为同一时刻一条路上只能有一辆车，所以我们需要为这条路制定规则，我们可以固定的划分车道或者规定限行时间(信道化技术)，或者我们让车自己根据当前路况动态的判断现在能不能去跑(动态媒体接入控制)。因此，两种技术是实现媒介共享技术的两种手段。  
动态媒体接入控制技术主要有两种技术路线：调度和随机接入，具体的，我们可以将其解释为：  
**完全调度(Perfect Scheduled)**：用户依据相应的顺序(如轮询)接受到调度的资源并进行使用。  
这种技术手段的主要问题是在动态场景下如何制定调度顺序，如何设定调度时长，用户如何确定自己所获得的调度资源的大小。  

**自由竞争(Free for All)**：所有用户均立即传输新数据包，期望没有来自其他用户的干扰。  
这种技术手段的主要问题是当冲突(干扰)产生时，用户应该何时以何种方式重新传输数据包。

## 5.2 信道化技术

信道化技术(Static channelization)是指对信道基于特定的划分规则进行固定的划分，从而实现多用户共同使用的分布式队列场景。常用的划分规则有：基于信道时分复用的TDMA(Time Division Multiple Access)，基于信道频分复用的FDMA(Frequency Divsion Multiple Access)，基于扩频技术码分多址的[CDMA(Code Divsion Multiple Access)](https://zhuanlan.zhihu.com/p/24798584)，以及将正交频分复用技术(OFDM)与FDMA相结合的OFDMA(Orthogonal Frequency Divison Multiple Access)。这四个应该是听说过最多的，除此之外还有NOMA(Non-Orthogonal Multiple Access，非正交多址接入)[这个如果不是专门研究确实很少听说，无论是百度还是wiki搜到的都是饭店]，SCMA(Sparse Code Multiple Access，稀疏编码多址接入)[华为的5G玩具]，PDMA(Pattern Division Multiple Access，图样分割多址接入)[大唐的5G玩具]，MUSA(Multi-User Shared Access，多用户共享接入)[中兴的5G玩具]等等，都是制定了某种划分规则，从而实现多址接入。

## 5.3 随机接入

本小节，我们不注重介绍随机接入技术的效率(与课堂讲解的基于更新理论和泊松过程的性能分析重点不同)，而是提出几种技术的思路，思想。

### 5.3.1 ALOHA

ALOHA是最早的冲突避免及重传协议，主要分为异步ALOHA和同步ALOHA两种。

**异步ALOHA**：又称纯ALOHA(Pure ALOHA)，每个用户产生的新数据包后，立即传输，当冲突发生时，延时一段时间重传。

**同步ALOHA**：又称时隙ALOHA(Slotted ALOHA)，将时间划分为若干个时隙，发送机会放置在每个时隙开始，当冲突发生时，延时一段时间重传。

具体的性能分析请参考[这里](https://baike.baidu.com/item/Aloha/3695024#viewPageContent)。

### 5.3.2 分裂算法

分裂算法提出的动机是什么呢？  
因为ALOHA协议并不不稳定，当负载量变大时，ALOHA协议的稳定性和功能都变得很脆弱，这就导致我们需要有更复杂的冲突解决技术。

分裂算法的思路是什么呢？  
在相对小的尝试率下，冲突可能发生在两个数据包之间，那么我们阻止新的数据包的传输，知道这个冲突被解决，发生冲突的数据包在下一个时隙以1/2的概率被成功重传。

三种常见的分裂算法：  
> 树算法：在冲突发生后，所有新到达量处于等待中而所有牵扯到冲突的节点会被分为几个子集。在一个子集中，后面发生的冲突会使该子集分裂为更小的子集，而其他节点继续等待。
> 
> 先到先服务(FCFS)分裂算法：数据包以到达顺序被传送，发生冲突时，产生冲突的分配区间被分列为两个子区间，位于左边的区间(较早到达的数据包)会首先被传输。
> 
> 后到先服务(LCFS)分裂算法：到达量等待一个新的CRP开始，但然后就以后来先服务的原则被分配，分配集合和等待几何能够包含多于一个时间区间。

### 5.3.3 CSMA

载波侦听多址接入(Carrier Sense Multiple Access, CSMA)是ALOHA演变出来的一种改进协议。  
CSMA采用了附加的硬件装置，每个用户都能在发送数据前侦听信道上其他用户是否正在发送数据。如果有用户正在发送数据，则侦听信道的该用户就暂时不发送数据，这样就可以减少产生冲突的概率，即能提高系统的吞吐量。

![](https://garacc.github.io/img/comnet_summary/csma.png)

CSMA协议按照检测到载波后何时再次监测分为了三种类型：非坚持，1-坚持，p-坚持  
非坚持：检测到信道被占用后，随机延迟一段时间再重新监测  
1-坚持：检测到信道被占用后，立即重新新的一次监测  
p-坚持：检测到信道被占用后，以p的概率立即重新新的一次监测  
基于CSMA的协议有很多，如CSMA/CA，CSMA/CD等等。

## 5.4 受控型的MAC协议

受控型的MAC协议即指通过调度的方式对接入进行控制，从而避免冲突的产生。这里我们介绍三种受控型的MAC协议：轮询(Polling, IEEE 802.4)，令牌(Token, IEEE 802.5)以及预留(Reservation)。

**轮询**：又称为令牌总线网(Token Bus)，在由多个结点共享公用信道的线路中，主机依照一定的顺序探询各结点有无传送信息的要求，被探询的结点如有传送要求就占用公用信道，将信息发送给主机。否则，主机继续探询下一结点。这一协议的本质是将网络拓扑为总线结构或星形网络结构。

**令牌**：又称为令牌环(Token Ring)，令牌始终在环上传输，当无帧发送时，令牌为空闲状态，所有的站点都可以俘获令牌，只有当站点获得空闲令牌后，才将令牌设置成忙状态，并发送数据。数据随令牌至目的站点后，目的站点将数据复制，令牌继续环行返回到发送站点，这时发送站点才将俘获的令牌释放，令牌重新成为空闲状态。这一协议的本质是将网络拓扑为环结构。

**预留**：预留相对于前两个协议使用的更少，思想也更加简单，就是在每一轮传输的开头预留一个时间，这个时间可以分为若干个更细的时隙，从而补充传输。

## 5.5 多跳网络的MAC协议*

为什么要把多跳网络单独拿出来详细讲呢，因为在多跳网络中，有很多之前的协议看不到，或者看到了无法解决的问题，比如

**隐藏终端问题**：在接收节点的覆盖范围内而在发送节点的覆盖范围外的节点。  
考虑A向B发送数据的场景，C为隐藏终端。当A向B发送数据时，C无法侦听到A的载波，因此会向B发送数据，从而使B收到信号互相干扰，产生冲突。

**暴露终端问题**：在发送节点的覆盖范围内而在接收节点的覆盖范围外的节点。  
考虑B向A发送数据的场景，C为暴露终端。当B向A发送数据时，C侦听到了B的载波，因此会产生延时，推迟发送。而实际上，与B通信的A在C的侦听范围外，C的数据发送不会影响到A的数据接收，这就使C引入了不必要的延时。

多跳网络的信道接入协议需要具备如下特性：

1. 高空间复用度
2. 避免分组间的冲突
3. 提供冲突的解决办法
4. 要与硬件无关(横向、纵向普遍适用性)
	- 横向普遍适用性：满足基本假设的无线模块都可以使用该协议
	- 纵向普遍适用性：无线模块可以随时采用无线通信技术的最新成果
5. 其他特性：公平性、低功耗、基于QoS等等

适用于多跳网络的接入协议：

**单信道**：

MACA(Multiple Access Collision Avoidance)：增加RTS和CTS两个信令包来对信道占有进行控制

MACAW(Multiple Access Collision Avoidance for Wireless LAN)：在MACA的基础上增加DS和ACK两个包对信道占有进行进一步控制

**双信道**：

BAPU(Basic Access Protocol solUtions for wireless)：在MACAW的基础上提出了基于双信道的无线信道接入协议

> 控制报文RTS，CTS和DS在控制信道上传输
> 
> 数据报文DATA和ACK在数据信道上传输

将单信道无法解决的问题暴露终端与隐藏终端问题在双信道条件下给出了初步的解决方案，但由于在数据信道发送ACK，暴露终端不能发送DATA，隐藏终端不能接收DATA的问题仍然存在。

DBTMA(Dual Busy Tone Multiple Access)：基于双信道加忙音信道的信道接入协议，通过带外忙音完全解决了暴露终端和隐藏终端问题。

此部分的性能分析一直是一个十分重要的讨论内容，多跳网络的评价指标一般有：

- 吞吐量
- 时延
- 能耗
- 其他特性
	- 公平性
	- 可扩展性
	- 动态性

## 5.6 认知无线电网络(CRN)的MAC协议

**认知无线电**：通过频谱感知的方法进行机会式频谱接入(OSA)的信道使用技术  
我们其实将认知无线电简单的理解为不停寻找机会的一些节点通过不断感知周围环境的空闲信道资源，从而在不影响原信道使用者的前提下，最大化利用信道资源的技术。  
CRN网络中的MAC协议与其他MAC协议最大的区别就是不能干扰主用户的使用。

## 5.7 DTN网络的MAC协议

DTN(Delay Tolerant Networks)网络，即时延容忍网络，包括水声、卫星等网络通信。

这类网络我们需要考虑的主要问题有：

- 长传播时延：长时延将导致冲突的几率变大
- 接受节点的的信噪比，可靠度低：信号淹没于噪声中，这导致我们需要引入必要的可靠传输机制
- 吸收系数与路径衰耗都与频率有关，导致带宽受限：需要考虑时间域或码字域的MAC协议
- 具有时变特性(信道，网络拓扑)

此类网络的MAC协议类型：

- 无冲突型：TDMA，CDMA
- 冲突型：基于握手，基于信道预约，随机接入

相关MAC协议介绍：[COD-TS](http://ieeexplore.ieee.org/document/6834831/)

## 思考题

1. 下图是一个多跳网络的示意图，如果节点之间有连线，表示在对方的通信范围之内。如果节点A有数据发送给节点B，请结合下图说明什么是暴露发送终端、暴露接收终端、隐藏发送终端和隐藏接收终端？假设该多跳网络的MAC协议采用了BAPU协议，试分析执行该协议后，暴露终端问题和隐藏终端问题的解决程度。
![](https://garacc.github.io/img/comnet_summary/multi_hop.png)
	- 单通道协议中仅有暴露终端和隐藏终端两种问题终端，但在引入双信道协议后，问题终端得以进一步划分，以此图为例：
		- 暴露发送终端：处于发送状态的暴露终端(初始通信对的发送端范围内，接收端范围外的终端)。如图，若D、G有终端处于发送状态，则为暴露发送终端。
		- 暴露接收终端：处于接收状态的暴露终端。如图，若D、G有终端处于接收状态，则为暴露接收终端。
		- 隐藏发送终端：处于发送状态的隐藏终端(初始通信对的发送端范围外，接收端范围内的终端)。如图，若F、M有终端处于发送状态，则为隐藏发送终端。
		- 隐藏接收终端：处于接收状态的隐藏终端。如图，若F、M有终端处于接收状态，则为隐藏接收终端。
	- BAPU协议是对MACAW协议向双信道的改进，其中RTS，CTS，DS在控制信道传输，DATA，ACK在数据信道传输。假设该网络采用BAPU协议，那么：
		- 暴露发送终端：以D为例，D可以发送数据，但D发送的DATA与B发送的ACK会在A产生冲突，所以BAPU协议无法解决暴露发送终端问题。
		- 暴露接收终端：以G为例，G无法接收数据，同时G可以从控制信道将让H停止无谓的RTS请求，所以BAPU协议可以解决暴露接收终端问题。
		- 隐藏发送终端：以F为例，F无法发送数据，根据RTS-CTS握手机制，接收到B发送的CTS的F会终止发送，所以BAPU协议可以解决隐藏发送终端问题。
		- 隐藏接收终端：以M为例，M可以接收数据，但N发送的DATA与B发送的ACK会在M产生冲突，所以BAPU协议无法解决隐藏接收终端问题。
	- 综上，BAPU初步解决了暴露终端和隐藏终端你的问题，但并未完全解决。

注：本章节相关资源可参考学习 [道客巴巴](http://www.doc88.com/p-215945957893.html)


# Chapter 6 路由算法与协议
---

- 概论
- 广播路由
- 最短路径算法
- 热土豆路由算法
- Cut-through路由算法
- 最优化路由
- 多跳网络的路由协议
- QoS路由
- 安全路由

## 6.1 概论

路由算法：

- 定义：网络层的协议，用以引导数据包通过通信子网到达正确的目的地。
- 主要功能：在各种源-目的地之间的路径中进行选择；在路径选择好之后信息向目的地正确传递。
- 数据结构和协议：路由表
	- 路由表：记录路由信息，与网络类型有关
- 性能度量：吞吐量(服务数量)；平均延迟时间(服务质量)

路由常见的有两种思路：

- 数据报形式：无连接，每次以数据报的形式发送，数据报在路由器间跳转
- 虚电路形式：面向连接，在多个路由器建建立虚拟链路连接，数据通过链路传输

路由与流量控制间的关系：

- 好的路由确保小的延时，流量控制将允许更多的数据进入网络
- 当符合较大时，对于相同的流量控制，更好的路由算法将实现更好的时延-吞吐量性能

## 6.2 广播路由

洪泛(Flooding)：发送方将数据发送到每一条路径里  
通信量为[L,2L]，L为网络中双线链路数目所需时间

生成树(Spanning Tree)：最小(权重)生成树  
通信量=N-1，N为网络中节点数目

## 6.3 最短路径算法

将整个路由网络拓扑成图，当我们对路由的要求为**最小跳数路由**，**最小延迟路由**，**最小代价路由**时，我们可以使用图论中的最短路算法来完成路由选择。

常用的最短路算法包括Bellman-Ford算法，Dijkstra算法，Floyd-Warshall算法等。由于这些算法在网络中大家介绍的比较丰富，这里仅介绍其主要思想，具体过程以及代码实现等等请参考其他资料。

**Bellman-Ford算法**：

1. 确定目的节点并记为节点1，初始化h为1
2. 计算其他所有节点经过h跳到达节点1的路径，若经过h跳无法到达，则距离记为\\(\\infty\\)
3. h=h+1，重复步骤2
4. 当增加跳数h时不再改变任何一个节点的路径选择时，算法终止

计算复杂度：\\(O(N^3)\\)

有一种节约计算开销的分布式非同步Bellman-Ford算法，将步骤2中的所有节点变化为临近节点，既增加了网络的并行计算量，又减少了每个用户自己保有路由表所需要存储的信息，比Bellman-Ford算法更加优秀。

**Dijkstra算法**：

1. 确定目的节点并记为节点1，将节点1置于目标集合中
2. 从所以其他节点中选择距离目标集合中的点最近的一个节点i(假设目标集合中对应的节点为节点j)，将路径(i,j)和节点i加入目标集合中
3. 重复步骤2
4. 当所有节点都已经在目标集合中时，算法终止

计算复杂度：\\(O(N^2)\\)

**Floyd-Warshall算法**：

1. 初始化所有节点，以及所有路径长度
2. 遍历所有节点k，判断所有节点i通过节点k到节点j的路径长度，若比原保有路径短，则更新保有路径

计算复杂度：\\(O(N^3)\\)

最短路径算法也有比较明显的缺陷：

- 单路径-吞吐量低：在一对源-目的节点之间仅会选择一条路径，导致吞吐量下降
- 易震荡-变化应变力差：当链路长度变化时，选择路径有可能会出现很大的通信量转移

这些问题使得我们需要考虑**最优化路由**。当然，在考虑最优化路由之前，我们需要先考虑一些其他问题，比如中继节点在网络转移过程中的感受。

## 6.4 热土豆路由算法和Cut-through路由算法

当中继节点的存储空间受限时，为了最小化缓存溢出导致的丢包，中继节点希望最快的将接收到的数据报转移出去。基于这样的思想，提出了两个简单直接而又确实有效的方法。

**热土豆路由算法**：当一个节点接收到报文后，确认当前哪条链路最为空闲，并将数据报从该链路发送出去。  
这一算法的主要问题是传输是无序的，同时数据报会被循环路由，无法保障时延等特性。

**Cut-through路由算法**：当一个节点接收到报文后，仅解析其目标节点在哪里，不对报文内信息做任何检查，直接按照目标节点方向将数据报发送出去。  
这一算法可以保证很低的时延，但主要问题是错误检测和重传只能是端到端的，一旦发生错误处理周期长。 

## 6.5 最优化路由

最优化路由其实是对给定目标的路由问题的数学抽象。我们首先将通信量阻塞这一概念进行量化，之后对最优化模型进行建模，建模完成后，后续求解其实就是数学层面的问题了。

**流模型**：通信量阻塞的假设条件

- 网络队列的到达过程满足统计规律
- 通信量阻塞与链路负载的平均通信量相关

这样的模型隐含的假设了进入网络的通信量的统计数据是不随时间改变的。(当统计数据相比于网络中清空队列所需的平均时间相比非常小时是有道理的，类似于不触及边界条件的长时间求取平均)

**代价函数**：最优化路由的目标

描述1：
$$
D_{ij}(F_{ij})=\frac{F_{ij}}{C_{ij}-F_{ij}}+d_{ij}F_{ij}
$$

其中\\(C\_{ij}\\)是链路(i,j)的传输容量；  
\\(F\_{ij}\\)是链路(i,j)的需求容量；  
\\(d\_{ij}\\)是处理和传播延迟。

这种表示方法可以表明系统中平均数据报的个数，同时量化了在流量\\(F\_{ij}\\)到达容量为\\(C\_{ij}\\)的链路时的阻塞情况。

描述2：
$$
\max_{(i,j)}\bigg\{\frac{F_{ij}}{C_{ij}}\bigg\}
$$

这种表示方法可以表明链路的最大利用率。

这两种描述在用于最优化路由问题求解时区别不大，因此我们选择容易使用代价函数进行优化的表示方法(第一种)。

最优化路由的目标：要将从源节点到目的节点的许多条路径中的每个输入通信量通过一种方法分离开，使最终得到的总的流情况使代价函数最小。

最优化问题的描述：

- \\(W\\) ~ 所有源-目的节点对(OD对)的集合
- \\(P\_{w}\\) ~ 连接OD对\\(w\\)的所有有向路径的集合
- \\(x_{p}\\) ~ 路径\\(p\\)的流量(数据单位/s)
- \\(r_{w}\\) ~ OD对\\(w\\)给定的输入通信量

$$
\min \sum_{(i,j)}D_{ij}\bigg[\sum_{all\;p\;with\;(i,j)}x_{p}\bigg]=D(x)
$$
$$
s.t. \sum_{p \in P_{w}}x_{p}=r_{w}, \forall w \in W \\
x_{p} \geq 0, \forall w \in W, p \in P_{w}
$$

剩余问题就都是数学问题了。

## 6.6 多跳网络的路由算法与协议

与讨论MAC协议时类似，多跳网路在处理路由问题是也会出现：

- 动态变化的网络拓扑结构
- 单向信道的存在
- 有限的无线传输带宽
- 无线移动终端自身存在局限性

等一系列问题。因此，多跳网络中主要有基于路由表的路由以及按需路由两种方式来解决这一问题。当然还有两者同时考虑的混合路由。

路由表驱动路由：

- DSDV(Destination-sequenced distance-vector)

按需路由：

- DSR(Dynamic source routing)
- LAR(Location-aided routing)
- AODV(Ad-hoc on-demand distance vector routing)

## 6.7 QoS路由

指为一次连接/分组寻找一条有足够资源、能满足QoS要求的可行路径的路由方法。  
QoS要求通常为带宽约束，时延约束，时延抖动约束等等。  
显然，这是一个NP问题。

QoS路由问题我们需要考虑的有：

- 获得满足应用QoS请求所必须的QoS路由计算信息
- 建立一条满足QoS请求的路径（QoS路由选择）
- 维护已建立的路径

与考虑因素对应，我们需要面对：

- QoS路径依赖于网络状态信息的准确度问题
	- 局部状态信息
	- 全局状态信息
- 交换分组过程中优先级不同引起的问题
- 安全性问题
- 多播路由问题

这个问题目前已经有了初步的研究，还没有完全解决。具体研究成果可参考[这里](http://ieeexplore.ieee.org/document/900643/)。

## 6.8 安全路由

路径建立都基于节点是可信基础上的。为了更好的使用路由技术，需要考虑路由的安全性和鲁棒性。

更多与安全相关的内容请移步《网络通信与安全》。














To Be Continued...